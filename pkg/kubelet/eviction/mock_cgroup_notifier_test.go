/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.53.3. DO NOT EDIT.

package eviction

import (
	logr "github.com/go-logr/logr"
	mock "github.com/stretchr/testify/mock"
)

// MockCgroupNotifier is an autogenerated mock type for the CgroupNotifier type
type MockCgroupNotifier struct {
	mock.Mock
}

type MockCgroupNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCgroupNotifier) EXPECT() *MockCgroupNotifier_Expecter {
	return &MockCgroupNotifier_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: logger, eventCh
func (_m *MockCgroupNotifier) Start(logger logr.Logger, eventCh chan<- struct{}) {
	_m.Called(logger, eventCh)
}

// MockCgroupNotifier_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCgroupNotifier_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - logger logr.Logger
//   - eventCh chan<- struct{}
func (_e *MockCgroupNotifier_Expecter) Start(logger interface{}, eventCh interface{}) *MockCgroupNotifier_Start_Call {
	return &MockCgroupNotifier_Start_Call{Call: _e.mock.On("Start", logger, eventCh)}
}

func (_c *MockCgroupNotifier_Start_Call) Run(run func(logger logr.Logger, eventCh chan<- struct{})) *MockCgroupNotifier_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logr.Logger), args[1].(chan<- struct{}))
	})
	return _c
}

func (_c *MockCgroupNotifier_Start_Call) Return() *MockCgroupNotifier_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCgroupNotifier_Start_Call) RunAndReturn(run func(logr.Logger, chan<- struct{})) *MockCgroupNotifier_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockCgroupNotifier) Stop() {
	_m.Called()
}

// MockCgroupNotifier_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockCgroupNotifier_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockCgroupNotifier_Expecter) Stop() *MockCgroupNotifier_Stop_Call {
	return &MockCgroupNotifier_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockCgroupNotifier_Stop_Call) Run(run func()) *MockCgroupNotifier_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCgroupNotifier_Stop_Call) Return() *MockCgroupNotifier_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCgroupNotifier_Stop_Call) RunAndReturn(run func()) *MockCgroupNotifier_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockCgroupNotifier creates a new instance of MockCgroupNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCgroupNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCgroupNotifier {
	mock := &MockCgroupNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
