/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	resourcev1alpha3 "k8s.io/api/resource/v1alpha3"
)

// DevicePatchApplyConfiguration represents a declarative configuration of the DevicePatch type for use
// with apply.
type DevicePatchApplyConfiguration struct {
	Filter     *DevicePatchFilterApplyConfiguration                                              `json:"filter,omitempty"`
	Priority   *int32                                                                            `json:"priority,omitempty"`
	Attributes map[resourcev1alpha3.FullyQualifiedName]NullableDeviceAttributeApplyConfiguration `json:"attributes,omitempty"`
	Capacity   map[resourcev1alpha3.FullyQualifiedName]DeviceCapacityApplyConfiguration          `json:"capacity,omitempty"`
}

// DevicePatchApplyConfiguration constructs a declarative configuration of the DevicePatch type for use with
// apply.
func DevicePatch() *DevicePatchApplyConfiguration {
	return &DevicePatchApplyConfiguration{}
}

// WithFilter sets the Filter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Filter field is set to the value of the last call.
func (b *DevicePatchApplyConfiguration) WithFilter(value *DevicePatchFilterApplyConfiguration) *DevicePatchApplyConfiguration {
	b.Filter = value
	return b
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *DevicePatchApplyConfiguration) WithPriority(value int32) *DevicePatchApplyConfiguration {
	b.Priority = &value
	return b
}

// WithAttributes puts the entries into the Attributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Attributes field,
// overwriting an existing map entries in Attributes field with the same key.
func (b *DevicePatchApplyConfiguration) WithAttributes(entries map[resourcev1alpha3.FullyQualifiedName]NullableDeviceAttributeApplyConfiguration) *DevicePatchApplyConfiguration {
	if b.Attributes == nil && len(entries) > 0 {
		b.Attributes = make(map[resourcev1alpha3.FullyQualifiedName]NullableDeviceAttributeApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Attributes[k] = v
	}
	return b
}

// WithCapacity puts the entries into the Capacity field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Capacity field,
// overwriting an existing map entries in Capacity field with the same key.
func (b *DevicePatchApplyConfiguration) WithCapacity(entries map[resourcev1alpha3.FullyQualifiedName]DeviceCapacityApplyConfiguration) *DevicePatchApplyConfiguration {
	if b.Capacity == nil && len(entries) > 0 {
		b.Capacity = make(map[resourcev1alpha3.FullyQualifiedName]DeviceCapacityApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Capacity[k] = v
	}
	return b
}
