/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// To regenerate api.pb.go run `hack/update-codegen.sh protobindings`

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.23.4
// source: api.proto

package v1beta1

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DevicePluginOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if PreStartContainer call is required before each container start
	PreStartRequired bool `protobuf:"varint,1,opt,name=pre_start_required,json=preStartRequired,proto3" json:"pre_start_required,omitempty"`
	// Indicates if GetPreferredAllocation is implemented and available for calling
	GetPreferredAllocationAvailable bool `protobuf:"varint,2,opt,name=get_preferred_allocation_available,json=getPreferredAllocationAvailable,proto3" json:"get_preferred_allocation_available,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *DevicePluginOptions) Reset() {
	*x = DevicePluginOptions{}
	mi := &file_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicePluginOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePluginOptions) ProtoMessage() {}

func (x *DevicePluginOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePluginOptions.ProtoReflect.Descriptor instead.
func (*DevicePluginOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *DevicePluginOptions) GetPreStartRequired() bool {
	if x != nil {
		return x.PreStartRequired
	}
	return false
}

func (x *DevicePluginOptions) GetGetPreferredAllocationAvailable() bool {
	if x != nil {
		return x.GetPreferredAllocationAvailable
	}
	return false
}

type RegisterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the API the Device Plugin was built against
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Name of the unix socket the device plugin is listening on
	// PATH = path.Join(DevicePluginPath, endpoint)
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Schedulable resource name. As of now it's expected to be a DNS Label
	ResourceName string `protobuf:"bytes,3,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Options to be communicated with Device Manager
	Options       *DevicePluginOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisterRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RegisterRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *RegisterRequest) GetOptions() *DevicePluginOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

// ListAndWatch returns a stream of List of Devices
// Whenever a Device state change or a Device disappears, ListAndWatch
// returns the new list
type ListAndWatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*Device              `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAndWatchResponse) Reset() {
	*x = ListAndWatchResponse{}
	mi := &file_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAndWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAndWatchResponse) ProtoMessage() {}

func (x *ListAndWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAndWatchResponse.ProtoReflect.Descriptor instead.
func (*ListAndWatchResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ListAndWatchResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type TopologyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*NUMANode            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopologyInfo) Reset() {
	*x = TopologyInfo{}
	mi := &file_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfo) ProtoMessage() {}

func (x *TopologyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfo.ProtoReflect.Descriptor instead.
func (*TopologyInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *TopologyInfo) GetNodes() []*NUMANode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NUMANode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NUMANode) Reset() {
	*x = NUMANode{}
	mi := &file_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NUMANode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NUMANode) ProtoMessage() {}

func (x *NUMANode) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NUMANode.ProtoReflect.Descriptor instead.
func (*NUMANode) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *NUMANode) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// E.g:
//
//	struct Device {
//	   ID: "GPU-fef8089b-4820-abfc-e83e-94318197576e",
//	   Health: "Healthy",
//	   Topology:
//	     Node:
//	       ID: 1
//	}
type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique ID assigned by the device plugin used
	// to identify devices during the communication
	// Max length of this field is 63 characters
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Health of the device, can be healthy or unhealthy, see constants.go
	Health string `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	// Topology for device
	Topology      *TopologyInfo `protobuf:"bytes,3,opt,name=topology,proto3" json:"topology,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *Device) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Device) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Device) GetTopology() *TopologyInfo {
	if x != nil {
		return x.Topology
	}
	return nil
}

//   - PreStartContainer is expected to be called before each container start if indicated by plugin during registration phase.
//   - PreStartContainer allows kubelet to pass reinitialized devices to containers.
//   - PreStartContainer allows Device Plugin to run device specific operations on
//     the Devices requested
type PreStartContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DevicesIds    []string               `protobuf:"bytes,1,rep,name=devices_ids,json=devicesIds,proto3" json:"devices_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreStartContainerRequest) Reset() {
	*x = PreStartContainerRequest{}
	mi := &file_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreStartContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreStartContainerRequest) ProtoMessage() {}

func (x *PreStartContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreStartContainerRequest.ProtoReflect.Descriptor instead.
func (*PreStartContainerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *PreStartContainerRequest) GetDevicesIds() []string {
	if x != nil {
		return x.DevicesIds
	}
	return nil
}

// PreStartContainerResponse will be send by plugin in response to PreStartContainerRequest
type PreStartContainerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreStartContainerResponse) Reset() {
	*x = PreStartContainerResponse{}
	mi := &file_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreStartContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreStartContainerResponse) ProtoMessage() {}

func (x *PreStartContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreStartContainerResponse.ProtoReflect.Descriptor instead.
func (*PreStartContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

// PreferredAllocationRequest is passed via a call to GetPreferredAllocation()
// at pod admission time. The device plugin should take the list of
// `available_deviceIDs` and calculate a preferred allocation of size
// 'allocation_size' from them, making sure to include the set of devices
// listed in 'must_include_deviceIDs'.
type PreferredAllocationRequest struct {
	state             protoimpl.MessageState                 `protogen:"open.v1"`
	ContainerRequests []*ContainerPreferredAllocationRequest `protobuf:"bytes,1,rep,name=container_requests,json=containerRequests,proto3" json:"container_requests,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PreferredAllocationRequest) Reset() {
	*x = PreferredAllocationRequest{}
	mi := &file_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreferredAllocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferredAllocationRequest) ProtoMessage() {}

func (x *PreferredAllocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferredAllocationRequest.ProtoReflect.Descriptor instead.
func (*PreferredAllocationRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *PreferredAllocationRequest) GetContainerRequests() []*ContainerPreferredAllocationRequest {
	if x != nil {
		return x.ContainerRequests
	}
	return nil
}

type ContainerPreferredAllocationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of available deviceIDs from which to choose a preferred allocation
	AvailableDeviceIDs []string `protobuf:"bytes,1,rep,name=available_deviceIDs,json=availableDeviceIDs,proto3" json:"available_deviceIDs,omitempty"`
	// List of deviceIDs that must be included in the preferred allocation
	MustIncludeDeviceIDs []string `protobuf:"bytes,2,rep,name=must_include_deviceIDs,json=mustIncludeDeviceIDs,proto3" json:"must_include_deviceIDs,omitempty"`
	// Number of devices to include in the preferred allocation
	AllocationSize int32 `protobuf:"varint,3,opt,name=allocation_size,json=allocationSize,proto3" json:"allocation_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ContainerPreferredAllocationRequest) Reset() {
	*x = ContainerPreferredAllocationRequest{}
	mi := &file_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerPreferredAllocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPreferredAllocationRequest) ProtoMessage() {}

func (x *ContainerPreferredAllocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPreferredAllocationRequest.ProtoReflect.Descriptor instead.
func (*ContainerPreferredAllocationRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *ContainerPreferredAllocationRequest) GetAvailableDeviceIDs() []string {
	if x != nil {
		return x.AvailableDeviceIDs
	}
	return nil
}

func (x *ContainerPreferredAllocationRequest) GetMustIncludeDeviceIDs() []string {
	if x != nil {
		return x.MustIncludeDeviceIDs
	}
	return nil
}

func (x *ContainerPreferredAllocationRequest) GetAllocationSize() int32 {
	if x != nil {
		return x.AllocationSize
	}
	return 0
}

// PreferredAllocationResponse returns a preferred allocation,
// resulting from a PreferredAllocationRequest.
type PreferredAllocationResponse struct {
	state              protoimpl.MessageState                  `protogen:"open.v1"`
	ContainerResponses []*ContainerPreferredAllocationResponse `protobuf:"bytes,1,rep,name=container_responses,json=containerResponses,proto3" json:"container_responses,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PreferredAllocationResponse) Reset() {
	*x = PreferredAllocationResponse{}
	mi := &file_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreferredAllocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferredAllocationResponse) ProtoMessage() {}

func (x *PreferredAllocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferredAllocationResponse.ProtoReflect.Descriptor instead.
func (*PreferredAllocationResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *PreferredAllocationResponse) GetContainerResponses() []*ContainerPreferredAllocationResponse {
	if x != nil {
		return x.ContainerResponses
	}
	return nil
}

type ContainerPreferredAllocationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceIDs     []string               `protobuf:"bytes,1,rep,name=deviceIDs,proto3" json:"deviceIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerPreferredAllocationResponse) Reset() {
	*x = ContainerPreferredAllocationResponse{}
	mi := &file_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerPreferredAllocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPreferredAllocationResponse) ProtoMessage() {}

func (x *ContainerPreferredAllocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPreferredAllocationResponse.ProtoReflect.Descriptor instead.
func (*ContainerPreferredAllocationResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerPreferredAllocationResponse) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

//   - Allocate is expected to be called during pod creation since allocation
//     failures for any container would result in pod startup failure.
//   - Allocate allows kubelet to exposes additional artifacts in a pod's
//     environment as directed by the plugin.
//   - Allocate allows Device Plugin to run device specific operations on
//     the Devices requested
type AllocateRequest struct {
	state             protoimpl.MessageState      `protogen:"open.v1"`
	ContainerRequests []*ContainerAllocateRequest `protobuf:"bytes,1,rep,name=container_requests,json=containerRequests,proto3" json:"container_requests,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AllocateRequest) Reset() {
	*x = AllocateRequest{}
	mi := &file_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateRequest) ProtoMessage() {}

func (x *AllocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateRequest.ProtoReflect.Descriptor instead.
func (*AllocateRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *AllocateRequest) GetContainerRequests() []*ContainerAllocateRequest {
	if x != nil {
		return x.ContainerRequests
	}
	return nil
}

type ContainerAllocateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DevicesIds    []string               `protobuf:"bytes,1,rep,name=devices_ids,json=devicesIds,proto3" json:"devices_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerAllocateRequest) Reset() {
	*x = ContainerAllocateRequest{}
	mi := &file_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerAllocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerAllocateRequest) ProtoMessage() {}

func (x *ContainerAllocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerAllocateRequest.ProtoReflect.Descriptor instead.
func (*ContainerAllocateRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *ContainerAllocateRequest) GetDevicesIds() []string {
	if x != nil {
		return x.DevicesIds
	}
	return nil
}

// CDIDevice specifies a CDI device information.
type CDIDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fully qualified CDI device name
	// for example: vendor.com/gpu=gpudevice1
	// see more details in the CDI specification:
	// https://github.com/container-orchestrated-devices/container-device-interface/blob/main/SPEC.md
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDIDevice) Reset() {
	*x = CDIDevice{}
	mi := &file_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDIDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDIDevice) ProtoMessage() {}

func (x *CDIDevice) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDIDevice.ProtoReflect.Descriptor instead.
func (*CDIDevice) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *CDIDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// AllocateResponse includes the artifacts that needs to be injected into
// a container for accessing 'deviceIDs' that were mentioned as part of
// 'AllocateRequest'.
// Failure Handling:
// if Kubelet sends an allocation request for dev1 and dev2.
// Allocation on dev1 succeeds but allocation on dev2 fails.
// The Device plugin should send a ListAndWatch update and fail the
// Allocation request
type AllocateResponse struct {
	state              protoimpl.MessageState       `protogen:"open.v1"`
	ContainerResponses []*ContainerAllocateResponse `protobuf:"bytes,1,rep,name=container_responses,json=containerResponses,proto3" json:"container_responses,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AllocateResponse) Reset() {
	*x = AllocateResponse{}
	mi := &file_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateResponse) ProtoMessage() {}

func (x *AllocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateResponse.ProtoReflect.Descriptor instead.
func (*AllocateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *AllocateResponse) GetContainerResponses() []*ContainerAllocateResponse {
	if x != nil {
		return x.ContainerResponses
	}
	return nil
}

type ContainerAllocateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of environment variable to be set in the container to access one of more devices.
	Envs map[string]string `protobuf:"bytes,1,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Mounts for the container.
	Mounts []*Mount `protobuf:"bytes,2,rep,name=mounts,proto3" json:"mounts,omitempty"`
	// Devices for the container.
	Devices []*DeviceSpec `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`
	// Container annotations to pass to the container runtime
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// CDI devices for the container.
	CdiDevices    []*CDIDevice `protobuf:"bytes,5,rep,name=cdi_devices,json=cdiDevices,proto3" json:"cdi_devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerAllocateResponse) Reset() {
	*x = ContainerAllocateResponse{}
	mi := &file_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerAllocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerAllocateResponse) ProtoMessage() {}

func (x *ContainerAllocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerAllocateResponse.ProtoReflect.Descriptor instead.
func (*ContainerAllocateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *ContainerAllocateResponse) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *ContainerAllocateResponse) GetMounts() []*Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *ContainerAllocateResponse) GetDevices() []*DeviceSpec {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ContainerAllocateResponse) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ContainerAllocateResponse) GetCdiDevices() []*CDIDevice {
	if x != nil {
		return x.CdiDevices
	}
	return nil
}

// Mount specifies a host volume to mount into a container.
// where device library or tools are installed on host and container
type Mount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path of the mount within the container.
	ContainerPath string `protobuf:"bytes,1,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	// Path of the mount on the host.
	HostPath string `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	// If set, the mount is read-only.
	ReadOnly      bool `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mount) Reset() {
	*x = Mount{}
	mi := &file_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *Mount) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *Mount) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *Mount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// DeviceSpec specifies a host device to mount into a container.
type DeviceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path of the device within the container.
	ContainerPath string `protobuf:"bytes,1,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	// Path of the device on the host.
	HostPath string `protobuf:"bytes,2,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	// Cgroups permissions of the device, candidates are one or more of
	// * r - allows container to read from the specified device.
	// * w - allows container to write to the specified device.
	// * m - allows container to create device files that do not yet exist.
	Permissions   string `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceSpec) Reset() {
	*x = DeviceSpec{}
	mi := &file_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSpec) ProtoMessage() {}

func (x *DeviceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSpec.ProtoReflect.Descriptor instead.
func (*DeviceSpec) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceSpec) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *DeviceSpec) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *DeviceSpec) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

var File_api_proto protoreflect.FileDescriptor

const file_api_proto_rawDesc = "" +
	"\n" +
	"\tapi.proto\x12\av1beta1\x1a-github.com/gogo/protobuf/gogoproto/gogo.proto\"\x90\x01\n" +
	"\x13DevicePluginOptions\x12,\n" +
	"\x12pre_start_required\x18\x01 \x01(\bR\x10preStartRequired\x12K\n" +
	"\"get_preferred_allocation_available\x18\x02 \x01(\bR\x1fgetPreferredAllocationAvailable\"\xa4\x01\n" +
	"\x0fRegisterRequest\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1a\n" +
	"\bendpoint\x18\x02 \x01(\tR\bendpoint\x12#\n" +
	"\rresource_name\x18\x03 \x01(\tR\fresourceName\x126\n" +
	"\aoptions\x18\x04 \x01(\v2\x1c.v1beta1.DevicePluginOptionsR\aoptions\"\a\n" +
	"\x05Empty\"A\n" +
	"\x14ListAndWatchResponse\x12)\n" +
	"\adevices\x18\x01 \x03(\v2\x0f.v1beta1.DeviceR\adevices\"7\n" +
	"\fTopologyInfo\x12'\n" +
	"\x05nodes\x18\x01 \x03(\v2\x11.v1beta1.NUMANodeR\x05nodes\"\x1a\n" +
	"\bNUMANode\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\x03R\x02ID\"c\n" +
	"\x06Device\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12\x16\n" +
	"\x06health\x18\x02 \x01(\tR\x06health\x121\n" +
	"\btopology\x18\x03 \x01(\v2\x15.v1beta1.TopologyInfoR\btopology\"K\n" +
	"\x18PreStartContainerRequest\x12/\n" +
	"\vdevices_ids\x18\x01 \x03(\tB\x0e\xe2\xde\x1f\n" +
	"DevicesIDsR\n" +
	"devicesIds\"\x1b\n" +
	"\x19PreStartContainerResponse\"y\n" +
	"\x1aPreferredAllocationRequest\x12[\n" +
	"\x12container_requests\x18\x01 \x03(\v2,.v1beta1.ContainerPreferredAllocationRequestR\x11containerRequests\"\xb5\x01\n" +
	"#ContainerPreferredAllocationRequest\x12/\n" +
	"\x13available_deviceIDs\x18\x01 \x03(\tR\x12availableDeviceIDs\x124\n" +
	"\x16must_include_deviceIDs\x18\x02 \x03(\tR\x14mustIncludeDeviceIDs\x12'\n" +
	"\x0fallocation_size\x18\x03 \x01(\x05R\x0eallocationSize\"}\n" +
	"\x1bPreferredAllocationResponse\x12^\n" +
	"\x13container_responses\x18\x01 \x03(\v2-.v1beta1.ContainerPreferredAllocationResponseR\x12containerResponses\"D\n" +
	"$ContainerPreferredAllocationResponse\x12\x1c\n" +
	"\tdeviceIDs\x18\x01 \x03(\tR\tdeviceIDs\"c\n" +
	"\x0fAllocateRequest\x12P\n" +
	"\x12container_requests\x18\x01 \x03(\v2!.v1beta1.ContainerAllocateRequestR\x11containerRequests\"K\n" +
	"\x18ContainerAllocateRequest\x12/\n" +
	"\vdevices_ids\x18\x01 \x03(\tB\x0e\xe2\xde\x1f\n" +
	"DevicesIDsR\n" +
	"devicesIds\"\x1f\n" +
	"\tCDIDevice\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"g\n" +
	"\x10AllocateResponse\x12S\n" +
	"\x13container_responses\x18\x01 \x03(\v2\".v1beta1.ContainerAllocateResponseR\x12containerResponses\"\xc9\x03\n" +
	"\x19ContainerAllocateResponse\x12@\n" +
	"\x04envs\x18\x01 \x03(\v2,.v1beta1.ContainerAllocateResponse.EnvsEntryR\x04envs\x12&\n" +
	"\x06mounts\x18\x02 \x03(\v2\x0e.v1beta1.MountR\x06mounts\x12-\n" +
	"\adevices\x18\x03 \x03(\v2\x13.v1beta1.DeviceSpecR\adevices\x12U\n" +
	"\vannotations\x18\x04 \x03(\v23.v1beta1.ContainerAllocateResponse.AnnotationsEntryR\vannotations\x12C\n" +
	"\vcdi_devices\x18\x05 \x03(\v2\x12.v1beta1.CDIDeviceB\x0e\xe2\xde\x1f\n" +
	"CDIDevicesR\n" +
	"cdiDevices\x1a7\n" +
	"\tEnvsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"h\n" +
	"\x05Mount\x12%\n" +
	"\x0econtainer_path\x18\x01 \x01(\tR\rcontainerPath\x12\x1b\n" +
	"\thost_path\x18\x02 \x01(\tR\bhostPath\x12\x1b\n" +
	"\tread_only\x18\x03 \x01(\bR\breadOnly\"r\n" +
	"\n" +
	"DeviceSpec\x12%\n" +
	"\x0econtainer_path\x18\x01 \x01(\tR\rcontainerPath\x12\x1b\n" +
	"\thost_path\x18\x02 \x01(\tR\bhostPath\x12 \n" +
	"\vpermissions\x18\x03 \x01(\tR\vpermissions2F\n" +
	"\fRegistration\x126\n" +
	"\bRegister\x12\x18.v1beta1.RegisterRequest\x1a\x0e.v1beta1.Empty\"\x002\xa3\x03\n" +
	"\fDevicePlugin\x12H\n" +
	"\x16GetDevicePluginOptions\x12\x0e.v1beta1.Empty\x1a\x1c.v1beta1.DevicePluginOptions\"\x00\x12A\n" +
	"\fListAndWatch\x12\x0e.v1beta1.Empty\x1a\x1d.v1beta1.ListAndWatchResponse\"\x000\x01\x12e\n" +
	"\x16GetPreferredAllocation\x12#.v1beta1.PreferredAllocationRequest\x1a$.v1beta1.PreferredAllocationResponse\"\x00\x12A\n" +
	"\bAllocate\x12\x18.v1beta1.AllocateRequest\x1a\x19.v1beta1.AllocateResponse\"\x00\x12\\\n" +
	"\x11PreStartContainer\x12!.v1beta1.PreStartContainerRequest\x1a\".v1beta1.PreStartContainerResponse\"\x00BJ\xc8\xe1\x1e\x01\xd8\xe1\x1e\x00\x80\xe2\x1e\x01\xc8\xe2\x1e\x01\xd0\xe2\x1e\x01\xe0\xe2\x1e\x01\x90\xe3\x1e\x00Z,k8s.io/kubelet/pkg/apis/deviceplugin/v1beta1b\x06proto3"

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData []byte
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_rawDesc), len(file_api_proto_rawDesc)))
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_proto_goTypes = []any{
	(*DevicePluginOptions)(nil),                  // 0: v1beta1.DevicePluginOptions
	(*RegisterRequest)(nil),                      // 1: v1beta1.RegisterRequest
	(*Empty)(nil),                                // 2: v1beta1.Empty
	(*ListAndWatchResponse)(nil),                 // 3: v1beta1.ListAndWatchResponse
	(*TopologyInfo)(nil),                         // 4: v1beta1.TopologyInfo
	(*NUMANode)(nil),                             // 5: v1beta1.NUMANode
	(*Device)(nil),                               // 6: v1beta1.Device
	(*PreStartContainerRequest)(nil),             // 7: v1beta1.PreStartContainerRequest
	(*PreStartContainerResponse)(nil),            // 8: v1beta1.PreStartContainerResponse
	(*PreferredAllocationRequest)(nil),           // 9: v1beta1.PreferredAllocationRequest
	(*ContainerPreferredAllocationRequest)(nil),  // 10: v1beta1.ContainerPreferredAllocationRequest
	(*PreferredAllocationResponse)(nil),          // 11: v1beta1.PreferredAllocationResponse
	(*ContainerPreferredAllocationResponse)(nil), // 12: v1beta1.ContainerPreferredAllocationResponse
	(*AllocateRequest)(nil),                      // 13: v1beta1.AllocateRequest
	(*ContainerAllocateRequest)(nil),             // 14: v1beta1.ContainerAllocateRequest
	(*CDIDevice)(nil),                            // 15: v1beta1.CDIDevice
	(*AllocateResponse)(nil),                     // 16: v1beta1.AllocateResponse
	(*ContainerAllocateResponse)(nil),            // 17: v1beta1.ContainerAllocateResponse
	(*Mount)(nil),                                // 18: v1beta1.Mount
	(*DeviceSpec)(nil),                           // 19: v1beta1.DeviceSpec
	nil,                                          // 20: v1beta1.ContainerAllocateResponse.EnvsEntry
	nil,                                          // 21: v1beta1.ContainerAllocateResponse.AnnotationsEntry
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: v1beta1.RegisterRequest.options:type_name -> v1beta1.DevicePluginOptions
	6,  // 1: v1beta1.ListAndWatchResponse.devices:type_name -> v1beta1.Device
	5,  // 2: v1beta1.TopologyInfo.nodes:type_name -> v1beta1.NUMANode
	4,  // 3: v1beta1.Device.topology:type_name -> v1beta1.TopologyInfo
	10, // 4: v1beta1.PreferredAllocationRequest.container_requests:type_name -> v1beta1.ContainerPreferredAllocationRequest
	12, // 5: v1beta1.PreferredAllocationResponse.container_responses:type_name -> v1beta1.ContainerPreferredAllocationResponse
	14, // 6: v1beta1.AllocateRequest.container_requests:type_name -> v1beta1.ContainerAllocateRequest
	17, // 7: v1beta1.AllocateResponse.container_responses:type_name -> v1beta1.ContainerAllocateResponse
	20, // 8: v1beta1.ContainerAllocateResponse.envs:type_name -> v1beta1.ContainerAllocateResponse.EnvsEntry
	18, // 9: v1beta1.ContainerAllocateResponse.mounts:type_name -> v1beta1.Mount
	19, // 10: v1beta1.ContainerAllocateResponse.devices:type_name -> v1beta1.DeviceSpec
	21, // 11: v1beta1.ContainerAllocateResponse.annotations:type_name -> v1beta1.ContainerAllocateResponse.AnnotationsEntry
	15, // 12: v1beta1.ContainerAllocateResponse.cdi_devices:type_name -> v1beta1.CDIDevice
	1,  // 13: v1beta1.Registration.Register:input_type -> v1beta1.RegisterRequest
	2,  // 14: v1beta1.DevicePlugin.GetDevicePluginOptions:input_type -> v1beta1.Empty
	2,  // 15: v1beta1.DevicePlugin.ListAndWatch:input_type -> v1beta1.Empty
	9,  // 16: v1beta1.DevicePlugin.GetPreferredAllocation:input_type -> v1beta1.PreferredAllocationRequest
	13, // 17: v1beta1.DevicePlugin.Allocate:input_type -> v1beta1.AllocateRequest
	7,  // 18: v1beta1.DevicePlugin.PreStartContainer:input_type -> v1beta1.PreStartContainerRequest
	2,  // 19: v1beta1.Registration.Register:output_type -> v1beta1.Empty
	0,  // 20: v1beta1.DevicePlugin.GetDevicePluginOptions:output_type -> v1beta1.DevicePluginOptions
	3,  // 21: v1beta1.DevicePlugin.ListAndWatch:output_type -> v1beta1.ListAndWatchResponse
	11, // 22: v1beta1.DevicePlugin.GetPreferredAllocation:output_type -> v1beta1.PreferredAllocationResponse
	16, // 23: v1beta1.DevicePlugin.Allocate:output_type -> v1beta1.AllocateResponse
	8,  // 24: v1beta1.DevicePlugin.PreStartContainer:output_type -> v1beta1.PreStartContainerResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_rawDesc), len(file_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
